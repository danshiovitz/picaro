- Add one time password / session cookie stuff
- projects
- events + actions
- regional, country, and arch villains, and their moves
- proposals/adjustments/whatever
- artifacts
- oracles
- finishing the season
- rumor phase
- other things like tags (terrain features, powers, villains) + zodiacs
- better engine unit testing
- different mechanics for captain and king play ("tool" exhaustion?)
- record all encounters + outcome + commentary and command to view history
- spend coins on stuff (xp? reputation?)
- being able to undo outcomes
- fill in stuff:
  - more feat hooks
  - terrain decks
  - job decks
  - camp deck
  - travel deck

ok so
what we have conceptually is a thing where players do player actions and this results in some board-state changes
sometimes the state change is in a character and sometimes it's on the board, but these are effectively the same kind of thing
separately, sometimes there are rules variants that kick in at various places. like, consider:
  "X switches to job Y" ->
  "when a character loses their job, they're transported 5 hexes in a random dir" ->
  "when character X is transported, they're transported 2 additional hexes"
should the original event be the job switch or the job switch + transport 5 or the job switch + transport 7?
what should we record for clarity on recapping, for undo purposes, for telling the player about their new state?

Encounter Resolution: Scouting Mission
- You received 100 coins
- You switched to a new job: Guard
- Your reputation is now 3
- You are now in hex A2 (+2 hexes due to Wandering Feet)
[We could also note that we're clearing the cards in the tableau and making a new deck, but we probably don't want to]

This implies that we display and log the fully-resolved event, but how do we put that in? Like, the imperial villain does "Winds of Change: Everyone switches to a new job, one level down". Do we resolve that immediately? I guess one idea is to push it on the encounter stack if they're mid-turn. This has the nice effect of not like transporting somebody away in the middle of some other encounter. We could say, conceptually, encounters are always pre-resolution and events are post-resolution. If an encounter is received outside the play phase, it's presumably queued for the start of next season.

When we start a season, we should first resolve all pending encounters, then we reset the tableau (or the other way around? you're likely to be out of luck by the end of the season, yeah? but if you're not it is straightforward to burn it on these)

So:

start season
- resolve pending encounters  # can't actually do this, because start season is non-interactive!
- reset season board
- enter play phase

play phase:
- while turns remaining:
  - while True:
    - if the encounter queue is non-empty:
      - pop the first encounter and resolve it
    - elif the character hasn't taken an action:
      - they can take one (start, travel, camp, etc); usually this queues an encounter
      - start removes the card from the tableau immediately, and moves the player
    - else:
      - break
  - finish the turn:
    - decrement the turn count
    - refill the tableau

finish season:
# how to figure out that something in the queue is from last season and should
# be resolved-default vs being from the rumors phase and should be spilled over?
# we could tag encounters with a source, I suppose, and we cancel everything
# from the play phase
# additional sources:
# - resolved oracles or projects or interventions
# - anything else?
# actually, is it ok for one person to be doing rumors while another is still playing?
# it kind of feels like we should wrap up play and let them enter the rumor phase but
# not have those rumors take effect? or, like, you say 3 days for play, 1 day for rumors;
# at the end of three days we finish play and cancel events (or sooner if everyone's done with play);
# then after 1 day or when everyone's done with rumors, we publish rumors

Projects:
- projects have a type, a target hex, and a list of stages
   - types are like Large Structure, Elaborate Device, Mystic Ritual, Deception, Popular Movement, Rebellion
- stages have a status (active, finished, future) and an xp bar (say max 25xp) and a type
  - search types pick a secret hex and give you clues about its location; when you do a search action in the secret hex, you get 25xp (on consideration, we pick a hex 15-25 hexes away from the target (~7 turns) and give you a radius of 4 to look in (37 hexes, so ~12 turns) but you search a hex just by entering it and it doesn't consume an action, so you can do 3/turn; further, after you search ~18 hexes unsuccessfully we give you a hint - note that this-all makes it so you can continue doing encounters as normal while working on the project, which makes it similar to other stage types)
  - challenge types put encounter cards in your deck that let you earn ~5 xp per
  - gather types require ~5 resources be delivered to the hex, and give you 5 xp per
  - time types give you 1xp per turn the stage is active
  - in addition, you can get the project encounter effect when a stage is active, which gives +1 xp to a random project's active stage
- how long do we expect projects to take? it feels like a short project should take about a season, hence the 25 xp number

Worldstate:
Ok, I realized that the encounter outcome object isn't really good enough - it can't even handle character A giving to character B. So new theory, let's split out the worldstate from the rules, like we've been pushing for ages. The worldstate encompasses the characters, the hexes and tokens, and (soon) the projects. Each of these are essentially entities that can have outcomes (events?), like
  @dataclass(frozen=True)
  class Event:
      id: int
      entity_type: str
      entity_name: str
      type: EventType
      subtype: Optional[str]
      values: Values[Any]
      comments: List[str]

  @dataclass(frozen=True)
  class Values(Generic[T]):
    old: T
    new: T

So we can have a thing like
  Event(entity_type="Character", entity_name="Conan", type=EventType.MODIFY_RESOURCES, subtype="Wine", values=Values(old=3, new=2), comments=["-1"]),
  Event(entity_type="Character", entity_name="Taurus", type=EventType.MODIFY_RESOURCES, subtype="Wine", values=Values(old=1, new=2), comments=["+1"]),
but also
  Event(entity_type="Character", entity_name="Conan", type=EventType.MODIFY_RESOURCES, subtype="Wine", values=Values(old=3, new=2), comments=["-1"]),
  Event(entity_type="ProjectStage", entity_name="asdb2623", type=EventType.MODIFY_RESOURCES, subtype="Wine", values=Values(old=0, new=1), comments=["+1"]),
  Event(entity_type="ProjectStage", entity_name="asdb2623", type=EventType.MODIFY_XP, subtype=None, values=Values(old=5, new=10), comments=["+5"]),
  Event(entity_type="ProjectStage", entity_name="asdb2623", type=EventType.MODIFY_STATE, subtype=None, values=Values(old=IN_PROGRESS, new=COMPLETED), comments=["xp bar filled"]),
and, we note,
  Event(entity_type="Character", entity_name="Conan", type=EventType.MODIFY_SPEED, subtype=None, values=Values(old=3, new=2), comments=["-1"]),
  Event(entity_type="Token", entity_name="Conan", type=EventType.MODIFY_LOCATION, subtype=None, values=Values(old="AB32", new="AB33"), comments=[]),

Though this latter raises the question, how do we distinguish between interesting and uninteresting event outcomes? It's not as simple as "was an encounter queued?" because what if they enter a spot and discover the project stage's secret hex? Maybe we should just have definitionally interesting or uninteresting:
  @dataclass(frozen=True)
  class Outcome:
    events: List[Event]
    interesting: bool
